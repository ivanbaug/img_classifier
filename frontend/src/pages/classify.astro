---
import Layout from "../layouts/Layout.astro";
import Navbar from "../components/Navbar.astro";
const title = "Image Classifier - Classify";
---

<Layout title={title}>
	<Navbar title={title} />
	<main>
		<div class="container mx-auto">
			<div class="flex flex-col items-center m-8">
				<div id="currentImage" class="bg-slate-950 h-1/2 rounded-md">
					<img
						id="imageElement"
						alt="Fetched Image"
						class="h-96 rounded-md"
					/>
				</div>
				<div class="pt-5 pb-10 flex justify-center w-1/2 gap-3">
					<div class="flex flex-col items-center justify-end">
						<div id="screenshotPredicted">ðŸ‘‡</div>
						<button
							id="screenshotBtn"
							class="bg-indigo-700 hover:bg-indigo-900 text-zinc-50 hover:text-zinc-200  py-2 px-4 w-36 rounded"
							>Screenshot</button
						>
					</div>
					<div class="flex flex-col items-center justify-end">
						<div id="keepPredicted">ðŸ‘‡</div>
						<button
							id="keepBtn"
							class="bg-sky-700 hover:bg-sky-900 text-zinc-50 hover:text-zinc-200  py-2 px-4 w-36 rounded"
							>Keep</button
						>
					</div>
					<div class="flex flex-col items-center justify-end">
						<div id="workPredicted">ðŸ‘‡</div>
						<button
							id="workBtn"
							class="bg-lime-700 hover:bg-lime-900 text-zinc-50 hover:text-zinc-200 py-2 px-4 w-36 rounded"
							>Work</button
						>
					</div>
				</div>
				<div class="flex w-1/2 justify-around gap-9">
					<div class="flex flex-col justify-around w-3/4 grow bg-zinc-800 rounded p-4 border border-zinc-700">
						<div id="totalStats" class="flex text-zinc-100 w-full gap-4 justify-evenly">
							<!-- Generated on runtime -->
						</div>
						<div id="listStats" class="flex text-zinc-100 w-full gap-4 justify-evenly">
							<!-- Generated on runtime -->
						</div>
					</div>

					<div
						class="py-8 flex flex-col items-center content-start gap-3"
					>
					
						<button
							id="savePrcBtn"
							class="bg-sky-700 hover:bg-sky-900 text-zinc-50 hover:text-zinc-200 py-2 px-4 w-64 rounded"
							>Move labeled images</button
						>
						<button
							id="trainFullBtn"
							class="bg-sky-700 hover:bg-sky-900 text-zinc-50 hover:text-zinc-200 py-2 px-4 w-64 rounded"
							>Train Full</button
						>
						<button
							id="trainFineTuneBtn"
							class="bg-sky-700 hover:bg-sky-900 text-zinc-50 hover:text-zinc-200 py-2 px-4 w-64 rounded"
							>FineTune</button
						>
					</div>
				</div>
			</div>
		</div>
		<div
			id="spinner"
			class="hidden fixed inset-0 items-center justify-center bg-black bg-opacity-50"
		>
			<div
				class="loader border-t-4 border-sky-700 rounded-full w-16 h-16 animate-spin"
			>
			</div>
		</div>
		<script>
			// API Response Types
			interface ImageResponse {
				success: boolean;
				info?: string;
				filename?: string;
				image?: string;
				stats?: StatItem[];
				predicted?: ImageType;
			}

			// Statistical data types
			interface StatItem {
				class?: string;
				amount: number;
			}

			// Image classification types
			type ImageType = "keep" | "work" | "screenshot" | "";

			const API_URL = import.meta.env.PUBLIC_API_URL;

			let sessionId = getQueryVariable("session");

			let firstLoad = true;
			const keepBtn = document.getElementById("keepBtn");
			const workBtn = document.getElementById("workBtn");
			// const memeBtn = document.getElementById('memeBtn');
			const screenshotBtn = document.getElementById("screenshotBtn");

			const savePrcBtn = document.getElementById("savePrcBtn");

			const trainFullBtn = document.getElementById("trainFullBtn");
			const trainFineTuneBtn =
				document.getElementById("trainFineTuneBtn");

			const screenshotEmoji = document.getElementById(
				"screenshotPredicted",
			);
			const workEmoji = document.getElementById("workPredicted");
			const keepEmoji = document.getElementById("keepPredicted");

			const currentImage = document.getElementById("currentImage");
			let currentFilename = "";

			keepBtn?.addEventListener("click", function () {
				sendImgTypeGetNewImg("keep");
			});

			// memeBtn.addEventListener('click', function() {
			//     sendImgTypeGetNewImg('meme');
			// });

			screenshotBtn?.addEventListener("click", function () {
				sendImgTypeGetNewImg("screenshot");
			});

			workBtn?.addEventListener("click", function () {
				sendImgTypeGetNewImg("work");
			});

			savePrcBtn?.addEventListener("click", function () {
				copyImgsToNewFolder();
			});

			trainFullBtn?.addEventListener("click", function () {
				trainModel(true);
			});

			trainFineTuneBtn?.addEventListener("click", function () {
				trainModel(false);
			});

			async function trainModel(fullTrain: boolean) {
				showSpinner();
				try {
					const postData = {
						sessionId: sessionId,
						fullTrain: fullTrain,
					};
					const response = await fetch(API_URL + "/train_model", {
						method: "POST",
						headers: { "Content-Type": "application/json" },
						body: JSON.stringify(postData),
					});

					const statusCode = response.status;
					const data: ImageResponse = await response.json();
					console.log(data);

					if (statusCode === 200) {
						window.alert(data.info);
					} else {
						console.log(data.info);
						window.alert(data.info);
					}
				} catch (error) {
					console.error("Error training model:", error);
				} finally {
					hideSpinner();
				}
			}

			async function fetchImage() {
				try {
					const response = await fetch(
						API_URL + "/random_image64?session=" + sessionId,
						{
							method: "GET",
						},
					);

					const data = await response.json();

					if (data.success === false) {
						displayStats(data);
						alert(data.info);
						return;
					}

					currentFilename = data.filename;
					// check file type by reading the file extension
					const fileExt = currentFilename.split(".").pop();
					const contentType = getContentType(fileExt);

					// Display the image
					const imgElement = document.getElementById(
						"imageElement",
					) as HTMLImageElement;
					imgElement.src = `data:${contentType};base64,` + data.image;

					// If stats received, display them
					displayStats(data);

					// Display the predicted class
					displayPredicted(data);
				} catch (error) {
					console.error("Error fetching image:", error);
				}
			}

			function displayPredicted(data: ImageResponse) {
				// Display the predicted class
				if (data.predicted) {
					keepEmoji?.classList.add("hidden");
					workEmoji?.classList.add("hidden");
					screenshotEmoji?.classList.add("hidden");

					switch (data.predicted) {
						case "keep":
							keepEmoji?.classList.remove("hidden");
							break;
						case "work":
							workEmoji?.classList.remove("hidden");
							break;
						case "screenshot":
							screenshotEmoji?.classList.remove("hidden");
							break;
						default:
							break;
					}
				} else {
					keepEmoji?.classList.add("hidden");
					workEmoji?.classList.add("hidden");
					screenshotEmoji?.classList.add("hidden");
				}
			}

			async function sendImgTypeGetNewImg(imgType: ImageType) {
				showSpinner();
				try {
					const postData = {
						filename: currentFilename,
						imgType: imgType,
						sessionId: sessionId,
					};
					const response = await fetch(API_URL + "/tag_img_get_new", {
						method: "POST",
						headers: { "Content-Type": "application/json" },
						body: JSON.stringify(postData),
					});

					const statusCode = response.status;
					const data = await response.json();
					console.log(data);

					if (statusCode === 200) {
						if (data.success === false) {
							displayStats(data);
							alert(data.info);
							hideSpinner();
							return;
						}

						currentFilename = data.filename;
						// check file type by reading the file extension
						const fileExt = currentFilename.split(".").pop();
						const contentType = getContentType(fileExt);

						// Display the image
						const imgElement = document.getElementById(
							"imageElement",
						) as HTMLImageElement;
						imgElement.src =
							`data:${contentType};base64,` + data.image;
						// Display the stats
						displayStats(data);

						// Display the predicted class
						displayPredicted(data);
					} else {
						console.log(data.info);
					}
					hideSpinner();
				} catch (error) {
					// console.log(data.info);
					console.error("Error fetching image:", error);
					hideSpinner();
				}
			}

			async function copyImgsToNewFolder() {
				showSpinner();
				try {
					const response = await fetch(
						API_URL +
							"/copy_imgs_to_new_folder?session=" +
							sessionId,
						{
							method: "GET",
						},
					);

					const data = await response.json();

					if (data.success === false) {
						hideSpinner();
						alert(data.info);
						return;
					} else {
						hideSpinner();
						alert(data.info);
					}
				} catch (error) {
					hideSpinner();
				}
			}

			function getContentType(fileExt?: string) {
				if (!fileExt) {
					return "image/jpeg";
				}
				// assign content type based on file extension
				let contentType = "";
				switch (fileExt.toLowerCase()) {
					case "gif":
						contentType = "image/gif";
						break;
					case "jpg":
						contentType = "image/jpeg";
					case "jpeg":
						contentType = "image/jpeg";
						break;
					case "png":
						contentType = "image/png";
						break;
					case "tiff":
						contentType = "image/tiff";
						break;
					case "icon":
						contentType = "image/vnd.microsoft.icon";
						break;
					case "x-icon":
						contentType = "image/x-icon";
						break;
					case "djvu":
						contentType = "image/vnd.djvu";
						break;
					case "svg":
						contentType = "image/svg+xml";
						break;
					default:
						contentType = "image/jpeg";
				}
				return contentType;
			}

			function displayStats(data: ImageResponse) {
				// If stats received, display them
				if (data.stats) {
					const statsElement = document.getElementById("listStats");
					const totalStatsElement =
						document.getElementById("totalStats");
					const total = data.stats.reduce((a, b) => a + b.amount, 0);
					let objRemaining = data.stats.find(
						(obj) => obj.class === "",
					);
					if (!objRemaining) {
						objRemaining = { amount: 0 };
					}
					const labeled = total - objRemaining.amount;
					if (totalStatsElement) {
						totalStatsElement.innerHTML = "";
						if (labeled && labeled >= 0) {
							totalStatsElement.appendChild(
								generateStatElement("LABELED", labeled),
							);
						}
						if (objRemaining.amount && objRemaining.amount >= 0) {
							totalStatsElement.appendChild(
								generateStatElement("REMAINING", objRemaining.amount),
							);
						}
						if (total && total >= 0) {
							totalStatsElement.appendChild(
								generateStatElement("TOTAL", total),
							);
						}
					}
					// Display the stats as a ul list
					if (statsElement) {
						statsElement.innerHTML = "";
						data.stats.forEach((stat) => {
							// skip if class is empty
							if (stat.class == "") {
								return;
							}
							let decorationColor = "";
							if (stat.class === "screenshot") {
								decorationColor = "decoration-indigo-700";
							}
							if (stat.class === "work") {
								decorationColor = "decoration-lime-700";
							}
							if (stat.class === "keep") {
								decorationColor = "decoration-sky-700";
							}

							const statDiv = generateStatElement(("" + stat.class).toUpperCase(), stat.amount, decorationColor);
							statsElement?.appendChild(statDiv);
					});
					}

				} else {
					const statsElement = document.getElementById("listStats");
					const totalStatsElement =
						document.getElementById("totalStats");
					if (totalStatsElement) {
						totalStatsElement.innerHTML = "";
					}
					if (statsElement) {
						statsElement.innerHTML = "";
					}
				}
				function generateStatElement(stat: string, value: string | number, decorationColor = "decoration-inherit"){
					const div = document.createElement("div");
					div.classList.add("flex", "flex-col", "items-center");
					const valueDiv = document.createElement("div");
					valueDiv.classList.add("text-4xl");
					valueDiv.textContent = "" + value;
					const statDiv = document.createElement("div");
					statDiv.classList.add("font-light", "tracking-wide", "-mt-1", "underline", "decoration-1", decorationColor);
					statDiv.textContent = stat;
					div.appendChild(valueDiv);
					div.appendChild(statDiv);
					return div;
				}
			}

			function getQueryVariable(variable: string) {
				var query = window.location.search.substring(1);
				var vars = query.split("&");
				for (var i = 0; i < vars.length; i++) {
					var pair = vars[i].split("=");
					if (pair[0] == variable) {
						return pair[1];
					}
				}
				alert("Query Variable " + variable + " not found");
			}

			if (firstLoad) {
				fetchImage();
				firstLoad = false;
			}

			const spinner = document.getElementById("spinner");

			function showSpinner() {
				spinner?.classList.remove("hidden");
				spinner?.classList.add("flex");
			}

			function hideSpinner() {
				spinner?.classList.add("hidden");
				spinner?.classList.remove("flex");
			}
		</script>
	</main>
</Layout>

<style></style>
